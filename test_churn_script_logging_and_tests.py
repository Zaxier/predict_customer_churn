import os
import logging
import glob
import pytest
from math import isclose

# import churn_library_solution as cls
from churn_library import import_data, perform_eda, encoder_helper, perform_feature_engineering, train_models

logging.basicConfig(
    filename='./logs/churn_library.log',
    level=logging.INFO,
    filemode='w',
    format='%(name)s - %(levelname)s - %(message)s')

def test_import(import_data):
    '''
    test data import - this example is completed for you to assist with the other test functions
    '''
    try:
        df = import_data("./data/bank_data.csv")
        logging.info("SUCCESS: Testing import_data")
    except FileNotFoundError as err:
        logging.error("Testing import_data: The file wasn't found")
        raise err

    try:
        assert df.shape[0] > 0
        assert df.shape[1] > 0
        return df
    except AssertionError as err:
        logging.error(
            "Testing import_data: The file doesn't appear to have rows and columns")
        raise err


def test_eda(perform_eda):
    '''
    test perform eda function
    '''
    # arrange
    necessary_image_pths = {'images/eda/churn_distribution.png', 'images/eda/marital_status_distribution.png',
                      'images/eda/customer_age_distribution.png', 'images/eda/heatmap.png',
                      'images/eda/total_transaction_distribution.png'}
    existing_files = set(glob.glob('images/eda/*.png'))
    files_to_remove = necessary_image_pths.intersection(existing_files)

    for pth in files_to_remove:
        os.remove(pth)
    df = import_data('./data/bank_data.csv')

    # act
    perform_eda(df)

    # assert
    resultant_image_files = glob.glob('images/eda/*.png')
    print(resultant_image_files)
    for pth in necessary_image_pths:
        try:
            assert pth in resultant_image_files
            logging.info('SUCCESS: image outputted for {}'.format(pth))
        except AssertionError:
            logging.error('{} file not generated by perform_eda() function.'.format(pth))


def test_encoder_helper(encoder_helper):
    '''
    test encoder helper
    '''
    # arrange
    df = import_data('./data/bank_data.csv')

    # act
    cat_columns = [
        'Gender',
        'Education_Level',
        'Marital_Status',
        'Income_Category',
        'Card_Category'
    ]
    encoded_df = encoder_helper(
        df=df,
        category_lst=cat_columns,
        response='_Churn')

    # assert
    # check that each of the columns is now a float value
    for col in cat_columns:
        try:
            assert f"{col}_Churn" in encoded_df.columns
            logging.info("SUCCESS: {} column encoded and found".format(col))
        except AssertionError:
            logging.error("{} column wasn't created".format(col))

        # check that the number of unique values in each encoded column matches the number
        # of unique values in the original column
        try:
            assert len(df[col].unique()) == len(df[f"{col}_Churn"].unique())
            logging.info(f"SUCCESS: Unique values check is working for {col}")
        except AssertionError:
            logging.error(f"The number of unique values in the encoded column {col} does not match the original")


    # check some values
    try:
        assert isclose(df.groupby('Gender')['Gender_Churn'].mean()['F'], 0.17357222844)
    except AssertionError:
        logging.error("Target encoding function looks like it's encoding incorrectly")

    try:
        assert isclose(df.groupby('Education_Level')['Education_Level_Churn'].mean()['High School'], 0.15201192250372578)
        logging.info("SUCCESS: Education_Level column looks to be correctly encoded")
    except AssertionError:
        logging.error("Target encoding function looks like it's encoding incorrectly")

    try:
        assert isclose(df.groupby('Marital_Status')['Marital_Status_Churn'].mean()['Married'], 0.15126946874333264)
        logging.info("SUCCESS: Marital_Status column looks to be correctly encoded")
    except AssertionError:
        logging.error("Target encoding function looks like it's encoding incorrectly")



def test_perform_feature_engineering(perform_feature_engineering):
    '''
    test perform_feature_engineering
    '''


def test_train_models(train_models):
    '''
    test train_models
    '''


if __name__ == "__main__":
    test_import(import_data)
    test_eda(perform_eda)
    test_encoder_helper(encoder_helper)
    # test_perform_feature_engineering(perform_feature_engineering)
    # test_train_models(train_models)
